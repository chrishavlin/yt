name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:

  build:
    name: "${{ matrix.tests-type }} tests: py${{ matrix.python-version }} on ${{ matrix.os }} (${{ matrix.test-runner }})"
    strategy:
      # run all tests even if e.g. image tests fail early
      fail-fast: false
      matrix:
        os: [
          ubuntu-latest,
        ]
        python-version: ['3.12']
        dependencies: [full]
        tests-type: [unit]
        test-runner: [pytest]

    runs-on: ${{ matrix.os }}

    concurrency:
      # auto-cancel any in-progress job *on the same branch*
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.tests-type }}-py${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.test-runner }}
      cancel-in-progress: true

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Checkout repo (bare)
      if: matrix.tests-type != 'answer'
      uses: actions/checkout@v4
    - name: Checkout repo (with submodules)
      if: matrix.tests-type == 'answer'
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install dependencies and yt
      shell: bash
      env:
        dependencies: ${{ matrix.dependencies }}
      run: source ./tests/ci_install.sh

    - run: python -m pip list
    - name: Run Unit Tests (pytest)
      if: matrix.test-runner == 'pytest'
      run: |
        pytest --color=yes yt/data_objects/tests yt/visualization/volume_rendering/tests/test_scene_annotation.py
    - name: Re-Run Failed Tests (pytest)
      if: failure()
      run: |
        pytest --color=yes --lf
